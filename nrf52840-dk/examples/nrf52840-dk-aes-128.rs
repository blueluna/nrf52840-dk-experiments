#![no_main]
#![no_std]

use nrf52840_dk as _;

use rtic::app;

use nrf52840_hal::clocks;
use nrf52840_pac as pac;

use nrf52_aes_128::{
    self, cryptocell_init, Aes128CbcDecrypt, Aes128CbcEncrypt, Aes128CtrDecrypt, Aes128CtrEncrypt,
    Aes128Decrypt, Aes128Encrypt, AsmAes128Decrypt, AsmAes128Encrypt, CryptoCellAes128CbcDecrypt,
    CryptoCellAes128CbcEncrypt, CryptoCellAes128Decrypt, CryptoCellAes128Encrypt, Ecb, EcbData,
    NrfAes128Encrypt, RustAes128Decrypt, RustAes128Encrypt,
};
use psila_crypto::{self, BLOCK_SIZE};
use psila_nrf52::timer::Timer;

#[app(device = nrf52840_pac, peripherals = true)]
const APP: () = {
    struct Resources {
        ecb: Ecb,
        timer: pac::TIMER1,
    }

    #[init]
    fn init(cx: init::Context) -> init::LateResources {
        // Configure to use external clocks, and start them
        let _clocks = clocks::Clocks::new(cx.device.CLOCK)
            .enable_ext_hfosc()
            .set_lfclk_src_external(clocks::LfOscConfiguration::NoExternalNoBypass)
            .start_lfclk();
        let mut timer = cx.device.TIMER1;
        timer.init();
        cx.device.CRYPTOCELL.enable.write(|w| w.enable().set_bit());
        cryptocell_init();
        init::LateResources {
            ecb: Ecb::init(cx.device.ECB, EcbData::new([0; 16], None)),
            timer,
        }
    }

    #[idle(resources = [ecb, timer])]
    fn idle(cx: idle::Context) -> ! {
        let ecb = cx.resources.ecb;
        let timer = cx.resources.timer;

        defmt::info!("~~~ Run some tests ~~~");

        {
            defmt::info!("~~~ Encrypt HW AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];

            let mut aes = NrfAes128Encrypt::new(ecb, &key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                aes.aes128_encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt HW AES CTR ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let counter = [
                0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
                0xfe, 0xff,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d,
                0xb6, 0xce, 0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b,
                0xb9, 0xff, 0xfd, 0xff, 0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f,
                0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab, 0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1,
                0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee,
            ];

            let mut aes = NrfAes128Encrypt::new(ecb, &key);
            let mut ctr = Aes128CtrEncrypt::new(&mut aes, counter);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ctr.encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt HW AES CTR ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let counter = [
                0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
                0xfe, 0xff,
            ];
            let message = [
                0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d,
                0xb6, 0xce, 0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b,
                0xb9, 0xff, 0xfd, 0xff, 0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f,
                0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab, 0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1,
                0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];

            let mut aes = NrfAes128Encrypt::new(ecb, &key);
            let mut ctr = Aes128CtrDecrypt::new(&mut aes, counter);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ctr.decrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt HW AES CBC ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];

            let mut aes = NrfAes128Encrypt::new(ecb, &key);
            let mut cbc = Aes128CbcEncrypt::new(&mut aes, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                cbc.encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt Rust AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];
            let mut ecb = RustAes128Encrypt::new(&key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ecb.aes128_encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt Rust AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let mut ecb = RustAes128Decrypt::new(&key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ecb.aes128_decrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt ASM AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];
            let mut ecb = AsmAes128Encrypt::new(&key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ecb.aes128_encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt ASM AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let mut ecb = AsmAes128Decrypt::new(&key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ecb.aes128_decrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt ASM AES CTR ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let counter = [
                0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
                0xfe, 0xff,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d,
                0xb6, 0xce, 0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b,
                0xb9, 0xff, 0xfd, 0xff, 0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f,
                0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab, 0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1,
                0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee,
            ];

            let mut aes = AsmAes128Encrypt::new(&key);
            let mut ctr = Aes128CtrEncrypt::new(&mut aes, counter);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ctr.encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt ASM AES CTR ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let counter = [
                0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
                0xfe, 0xff,
            ];
            let message = [
                0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d,
                0xb6, 0xce, 0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b,
                0xb9, 0xff, 0xfd, 0xff, 0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f,
                0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab, 0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1,
                0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];

            let mut aes = AsmAes128Encrypt::new(&key);
            let mut ctr = Aes128CtrDecrypt::new(&mut aes, counter);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                ctr.decrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt ASM AES CBC ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];

            let mut aes = AsmAes128Encrypt::new(&key);
            let mut cbc = Aes128CbcEncrypt::new(&mut aes, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                cbc.encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt ASM AES CBC ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];

            let mut aes = AsmAes128Decrypt::new(&key);
            let mut cbc = Aes128CbcDecrypt::new(&mut aes, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                cbc.decrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Encrypt CC AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];
            let mut ecb = CryptoCellAes128Encrypt::new(&key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            ecb.aes128_encrypt(&message, &mut encrypted[..message.len()]);

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt CC AES ECB ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let message = [
                0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66,
                0xef, 0x97, 0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a,
                0x96, 0xfd, 0xba, 0xaf, 0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b,
                0x00, 0xe3, 0xed, 0x03, 0x06, 0x88, 0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f,
                0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let mut ecb = CryptoCellAes128Decrypt::new(&key);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            ecb.aes128_decrypt(&message, &mut encrypted[..message.len()]);

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }
        /*
        {
            defmt::info!("~~~ Encrypt CC AES CBC Chunks ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];

            let mut aes = CryptoCellAes128Encrypt::new(&key);
            let mut cbc = Aes128CbcEncrypt::new(&mut aes, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                cbc.encrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt CC AES CBC Chunks ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];

            let mut aes = CryptoCellAes128Decrypt::new(&key);
            let mut cbc = Aes128CbcDecrypt::new(&mut aes, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            for (input, output) in message
                .chunks_exact(BLOCK_SIZE)
                .zip(encrypted.chunks_exact_mut(BLOCK_SIZE))
            {
                cbc.decrypt(input, output);
            }

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }
        */

        {
            defmt::info!("~~~ Encrypt CC AES CBC ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];
            let result = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];

            let mut cbc = CryptoCellAes128CbcEncrypt::new(&key, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            cbc.encrypt(&message, &mut encrypted[..message.len()]);

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        {
            defmt::info!("~~~ Decrypt CC AES CBC ~~~");
            // Test vectors taken from NIST Special Publication 800-38A
            // Recommendation for Block Cipher Modes of Operation - Methods and Techniques
            let key = [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ];
            let initialisation_vector = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
                0x0e, 0x0f,
            ];
            let message = [
                0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
                0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
                0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
                0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
                0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
            ];
            let result = [
                0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
                0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
                0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
                0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
                0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
            ];

            let mut cbc = CryptoCellAes128CbcDecrypt::new(&key, initialisation_vector);

            let mut encrypted = [0u8; 256];

            let start = timer.now();

            cbc.decrypt(&message, &mut encrypted[..message.len()]);

            let end = timer.now();
            let elapsed = end - start;

            let mut errors = 0;
            for (calculated, correct) in encrypted
                .chunks_exact(BLOCK_SIZE)
                .zip(result.chunks_exact(BLOCK_SIZE))
            {
                if calculated != correct {
                    defmt::info!("Block mimatch");
                    errors += 1;
                }
            }
            if errors == 0 {
                defmt::info!("SUCCESS");
            } else {
                defmt::info!("FAIL");
            }
            defmt::info!("took {:u32} us", elapsed);
        }

        loop {
            continue;
        }
    }
};
